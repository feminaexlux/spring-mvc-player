/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model.table.record;

import net.feminaexlux.player.model.table.Directory;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import java.sql.Timestamp;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DirectoryRecord extends UpdatableRecordImpl<DirectoryRecord> implements Record3<String, String, Timestamp> {

	private static final long serialVersionUID = -1042426564;

	/**
	 * Setter for <code>media.directory.directory</code>.
	 */
	public void setDirectory(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>media.directory.directory</code>.
	 */
	public String getDirectory() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>media.directory.type</code>.
	 */
	public void setType(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>media.directory.type</code>.
	 */
	public String getType() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>media.directory.last_scanned</code>.
	 */
	public void setLastScanned(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>media.directory.last_scanned</code>.
	 */
	public Timestamp getLastScanned() {
		return (Timestamp) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<String, String> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<String, String, Timestamp> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<String, String, Timestamp> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Directory.DIRECTORY.DIRECTORY_;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Directory.DIRECTORY.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Directory.DIRECTORY.LAST_SCANNED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getDirectory();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getLastScanned();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord value1(String value) {
		setDirectory(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord value2(String value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord value3(Timestamp value) {
		setLastScanned(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord values(String value1, String value2, Timestamp value3) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached DirectoryRecord
	 */
	public DirectoryRecord() {
		super(Directory.DIRECTORY);
	}

	/**
	 * Create a detached, initialised DirectoryRecord
	 */
	public DirectoryRecord(String directory, String type, Timestamp lastScanned) {
		super(Directory.DIRECTORY);

		setValue(0, directory);
		setValue(1, type);
		setValue(2, lastScanned);
	}
}
