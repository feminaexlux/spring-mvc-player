/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model.table;

import net.feminaexlux.player.model.Key;
import net.feminaexlux.player.model.Media;
import net.feminaexlux.player.model.table.record.TypeRecord;
import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Type extends TableImpl<TypeRecord> {

	private static final long serialVersionUID = 1306740058;

	/**
	 * The reference instance of <code>media.type</code>
	 */
	public static final Type TYPE = new Type();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TypeRecord> getRecordType() {
		return TypeRecord.class;
	}

	/**
	 * The column <code>media.type.type</code>.
	 */
	public final TableField<TypeRecord, String> TYPE_ = createField("type", SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * Create a <code>media.type</code> table reference
	 */
	public Type() {
		this("type", null);
	}

	/**
	 * Create an aliased <code>media.type</code> table reference
	 */
	public Type(String alias) {
		this(alias, Type.TYPE);
	}

	private Type(String alias, Table<TypeRecord> aliased) {
		this(alias, aliased, null);
	}

	private Type(String alias, Table<TypeRecord> aliased, Field<?>[] parameters) {
		super(alias, Media.MEDIA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TypeRecord> getPrimaryKey() {
		return Key.KEY_TYPE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TypeRecord>> getKeys() {
		return Arrays.<UniqueKey<TypeRecord>>asList(Key.KEY_TYPE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Type as(String alias) {
		return new Type(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Type rename(String name) {
		return new Type(name, null);
	}
}
