/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model.table.record;

import net.feminaexlux.player.model.table.Principal;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PrincipalRecord extends UpdatableRecordImpl<PrincipalRecord> implements Record4<String, String, String, Timestamp> {

	private static final long serialVersionUID = 1045964513;

	/**
	 * Setter for <code>media.principle.username</code>.
	 */
	public void setUsername(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>media.principle.username</code>.
	 */
	public String getUsername() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>media.principle.password</code>.
	 */
	public void setPassword(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>media.principle.password</code>.
	 */
	public String getPassword() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>media.principle.name</code>.
	 */
	public void setName(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>media.principle.name</code>.
	 */
	public String getName() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>media.principle.lastLogin</code>.
	 */
	public void setLastlogin(Timestamp value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>media.principle.lastLogin</code>.
	 */
	public Timestamp getLastlogin() {
		return (Timestamp) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, String, Timestamp> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, String, Timestamp> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Principal.PRINCIPAL.USERNAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Principal.PRINCIPAL.PASSWORD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Principal.PRINCIPAL.NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field4() {
		return Principal.PRINCIPAL.LASTLOGIN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getUsername();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getPassword();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value4() {
		return getLastlogin();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord value1(String value) {
		setUsername(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord value2(String value) {
		setPassword(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord value3(String value) {
		setName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord value4(Timestamp value) {
		setLastlogin(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord values(String value1, String value2, String value3, Timestamp value4) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PrincipleRecord
	 */
	public PrincipalRecord() {
		super(Principal.PRINCIPAL);
	}

	/**
	 * Create a detached, initialised PrincipleRecord
	 */
	public PrincipalRecord(String username, String password, String name, Timestamp lastlogin) {
		super(Principal.PRINCIPAL);

		setValue(0, username);
		setValue(1, password);
		setValue(2, name);
		setValue(3, lastlogin);
	}
}
