/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model.tables;

import net.feminaexlux.player.model.Keys;
import net.feminaexlux.player.model.Media;
import net.feminaexlux.player.model.tables.records.MusicRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Music extends TableImpl<MusicRecord> {

	private static final long serialVersionUID = -233104811;

	/**
	 * The reference instance of <code>media.music</code>
	 */
	public static final Music MUSIC = new Music();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MusicRecord> getRecordType() {
		return MusicRecord.class;
	}

	/**
	 * The column <code>media.music.resource</code>.
	 */
	public final TableField<MusicRecord, String> RESOURCE = createField("resource", SQLDataType.VARCHAR.length(40).nullable(false), this, "");

	/**
	 * The column <code>media.music.artist</code>.
	 */
	public final TableField<MusicRecord, String> ARTIST = createField("artist", SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>media.music.album</code>.
	 */
	public final TableField<MusicRecord, String> ALBUM = createField("album", SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>media.music.track</code>.
	 */
	public final TableField<MusicRecord, Integer> TRACK = createField("track", SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>media.music.title</code>.
	 */
	public final TableField<MusicRecord, String> TITLE = createField("title", SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>media.music.genre</code>.
	 */
	public final TableField<MusicRecord, String> GENRE = createField("genre", SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>media.music.rating</code>.
	 */
	public final TableField<MusicRecord, Byte> RATING = createField("rating", SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>media.music</code> table reference
	 */
	public Music() {
		this("music", null);
	}

	/**
	 * Create an aliased <code>media.music</code> table reference
	 */
	public Music(String alias) {
		this(alias, Music.MUSIC);
	}

	private Music(String alias, Table<MusicRecord> aliased) {
		this(alias, aliased, null);
	}

	private Music(String alias, Table<MusicRecord> aliased, Field<?>[] parameters) {
		super(alias, Media.MEDIA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MusicRecord> getPrimaryKey() {
		return Keys.KEY_MUSIC_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MusicRecord>> getKeys() {
		return Arrays.<UniqueKey<MusicRecord>>asList(Keys.KEY_MUSIC_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<MusicRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<MusicRecord, ?>>asList(Keys.FK1_MUSIC_RESOURCE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Music as(String alias) {
		return new Music(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Music rename(String name) {
		return new Music(name, null);
	}
}
