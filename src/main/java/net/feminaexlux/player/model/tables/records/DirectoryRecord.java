/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model.tables.records;

import net.feminaexlux.player.model.tables.Directory;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DirectoryRecord extends UpdatableRecordImpl<DirectoryRecord> implements Record3<String, String, Timestamp> {

	private static final long serialVersionUID = -775288647;

	/**
	 * Setter for <code>media.directory.location</code>.
	 */
	public void setLocation(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>media.directory.location</code>.
	 */
	public String getLocation() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>media.directory.type</code>.
	 */
	public void setType(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>media.directory.type</code>.
	 */
	public String getType() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>media.directory.lastScanned</code>.
	 */
	public void setLastscanned(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>media.directory.lastScanned</code>.
	 */
	public Timestamp getLastscanned() {
		return (Timestamp) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<String, String, Timestamp> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<String, String, Timestamp> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Directory.DIRECTORY.LOCATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Directory.DIRECTORY.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Directory.DIRECTORY.LASTSCANNED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getLocation();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getLastscanned();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord value1(String value) {
		setLocation(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord value2(String value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord value3(Timestamp value) {
		setLastscanned(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DirectoryRecord values(String value1, String value2, Timestamp value3) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached DirectoryRecord
	 */
	public DirectoryRecord() {
		super(Directory.DIRECTORY);
	}

	/**
	 * Create a detached, initialised DirectoryRecord
	 */
	public DirectoryRecord(String location, String type, Timestamp lastscanned) {
		super(Directory.DIRECTORY);

		setValue(0, location);
		setValue(1, type);
		setValue(2, lastscanned);
	}
}
