/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model.tables.records;

import net.feminaexlux.player.model.tables.TypeExtension;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TypeExtensionRecord extends UpdatableRecordImpl<TypeExtensionRecord> implements Record2<String, String> {

	private static final long serialVersionUID = -1673431381;

	/**
	 * Setter for <code>media.type_extension.type</code>.
	 */
	public void setType(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>media.type_extension.type</code>.
	 */
	public String getType() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>media.type_extension.extension</code>.
	 */
	public void setExtension(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>media.type_extension.extension</code>.
	 */
	public String getExtension() {
		return (String) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<String, String> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, String> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, String> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return TypeExtension.TYPE_EXTENSION.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return TypeExtension.TYPE_EXTENSION.EXTENSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getExtension();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TypeExtensionRecord value1(String value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TypeExtensionRecord value2(String value) {
		setExtension(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TypeExtensionRecord values(String value1, String value2) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TypeExtensionRecord
	 */
	public TypeExtensionRecord() {
		super(TypeExtension.TYPE_EXTENSION);
	}

	/**
	 * Create a detached, initialised TypeExtensionRecord
	 */
	public TypeExtensionRecord(String type, String extension) {
		super(TypeExtension.TYPE_EXTENSION);

		setValue(0, type);
		setValue(1, extension);
	}
}
