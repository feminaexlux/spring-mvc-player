/**
 * This class is generated by jOOQ
 */
package net.feminaexlux.player.model;

import net.feminaexlux.player.model.table.Directory;
import net.feminaexlux.player.model.table.Music;
import net.feminaexlux.player.model.table.Resource;
import net.feminaexlux.player.model.table.Type;
import net.feminaexlux.player.model.table.TypeExtension;
import net.feminaexlux.player.model.table.User;
import net.feminaexlux.player.model.table.UserPlayed;
import net.feminaexlux.player.model.table.UserRole;
import net.feminaexlux.player.model.table.record.DirectoryRecord;
import net.feminaexlux.player.model.table.record.MusicRecord;
import net.feminaexlux.player.model.table.record.ResourceRecord;
import net.feminaexlux.player.model.table.record.TypeExtensionRecord;
import net.feminaexlux.player.model.table.record.TypeRecord;
import net.feminaexlux.player.model.table.record.UserPlayedRecord;
import net.feminaexlux.player.model.table.record.UserRecord;
import net.feminaexlux.player.model.table.record.UserRoleRecord;
import org.jooq.ForeignKey;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import javax.annotation.Generated;

/**
 * A class modelling foreign key relationships between tables of the <code>media</code>
 * schema
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.5.0"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Key {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_PRIMARY = UniqueKeys0.KEY_DIRECTORY_PRIMARY;
	public static final UniqueKey<MusicRecord> KEY_MUSIC_PRIMARY = UniqueKeys0.KEY_MUSIC_PRIMARY;
	public static final UniqueKey<ResourceRecord> KEY_RESOURCE_PRIMARY = UniqueKeys0.KEY_RESOURCE_PRIMARY;
	public static final UniqueKey<TypeRecord> KEY_TYPE_PRIMARY = UniqueKeys0.KEY_TYPE_PRIMARY;
	public static final UniqueKey<TypeExtensionRecord> KEY_TYPE_EXTENSION_PRIMARY = UniqueKeys0.KEY_TYPE_EXTENSION_PRIMARY;
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
	public static final UniqueKey<UserPlayedRecord> KEY_USER_PLAYED_PRIMARY = UniqueKeys0.KEY_USER_PLAYED_PRIMARY;
	public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = UniqueKeys0.KEY_USER_ROLE_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<MusicRecord, ResourceRecord> FK1_MUSIC_RESOURCE = ForeignKeys0.FK1_MUSIC_RESOURCE;
	public static final ForeignKey<ResourceRecord, DirectoryRecord> FK1_RESOURCE_DIRECTORY_DIRECTORY = ForeignKeys0.FK1_RESOURCE_DIRECTORY_DIRECTORY;
	public static final ForeignKey<ResourceRecord, TypeRecord> FK2_RESOURCE_DIRECTORY_TYPE = ForeignKeys0.FK2_RESOURCE_DIRECTORY_TYPE;
	public static final ForeignKey<ResourceRecord, TypeRecord> FK3_RESOURCE_TYPE_TYPE = ForeignKeys0.FK3_RESOURCE_TYPE_TYPE;
	public static final ForeignKey<TypeExtensionRecord, TypeRecord> FK1_TYPE_EXTENSION_TYPE = ForeignKeys0.FK1_TYPE_EXTENSION_TYPE;
	public static final ForeignKey<UserPlayedRecord, UserRecord> FK1_USER_PLAYED_USER = ForeignKeys0.FK1_USER_PLAYED_USER;
	public static final ForeignKey<UserPlayedRecord, ResourceRecord> FK2_USER_PLAYED_RESOURCE = ForeignKeys0.FK2_USER_PLAYED_RESOURCE;
	public static final ForeignKey<UserRoleRecord, UserRecord> FK1_USER_ROLE_USER = ForeignKeys0.FK1_USER_ROLE_USER;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class UniqueKeys0 extends AbstractKeys {

		public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_PRIMARY = createUniqueKey(Directory.DIRECTORY, Directory.DIRECTORY.DIRECTORY_, Directory.DIRECTORY.TYPE);
		public static final UniqueKey<MusicRecord> KEY_MUSIC_PRIMARY = createUniqueKey(Music.MUSIC, Music.MUSIC.CHECKSUM);
		public static final UniqueKey<ResourceRecord> KEY_RESOURCE_PRIMARY = createUniqueKey(Resource.RESOURCE, Resource.RESOURCE.CHECKSUM);
		public static final UniqueKey<TypeRecord> KEY_TYPE_PRIMARY = createUniqueKey(Type.TYPE, Type.TYPE.TYPE_);
		public static final UniqueKey<TypeExtensionRecord> KEY_TYPE_EXTENSION_PRIMARY = createUniqueKey(TypeExtension.TYPE_EXTENSION, TypeExtension.TYPE_EXTENSION.TYPE, TypeExtension.TYPE_EXTENSION.EXTENSION);
		public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, User.USER.USERNAME);
		public static final UniqueKey<UserPlayedRecord> KEY_USER_PLAYED_PRIMARY = createUniqueKey(UserPlayed.USER_PLAYED, UserPlayed.USER_PLAYED.USERNAME, UserPlayed.USER_PLAYED.RESOURCE);
		public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = createUniqueKey(UserRole.USER_ROLE, UserRole.USER_ROLE.USERNAME, UserRole.USER_ROLE.ROLE);
	}

	private static class ForeignKeys0 extends AbstractKeys {

		public static final ForeignKey<MusicRecord, ResourceRecord> FK1_MUSIC_RESOURCE = createForeignKey(Key.KEY_RESOURCE_PRIMARY, Music.MUSIC, Music.MUSIC.CHECKSUM);
		public static final ForeignKey<ResourceRecord, DirectoryRecord> FK1_RESOURCE_DIRECTORY_DIRECTORY = createForeignKey(Key.KEY_DIRECTORY_PRIMARY, Resource.RESOURCE, Resource.RESOURCE.DIRECTORY);
		public static final ForeignKey<ResourceRecord, TypeRecord> FK2_RESOURCE_DIRECTORY_TYPE = createForeignKey(Key.KEY_TYPE_PRIMARY, Resource.RESOURCE, Resource.RESOURCE.TYPE);
		public static final ForeignKey<ResourceRecord, TypeRecord> FK3_RESOURCE_TYPE_TYPE = createForeignKey(Key.KEY_TYPE_PRIMARY, Resource.RESOURCE, Resource.RESOURCE.TYPE);
		public static final ForeignKey<TypeExtensionRecord, TypeRecord> FK1_TYPE_EXTENSION_TYPE = createForeignKey(Key.KEY_TYPE_PRIMARY, TypeExtension.TYPE_EXTENSION, TypeExtension.TYPE_EXTENSION.TYPE);
		public static final ForeignKey<UserPlayedRecord, UserRecord> FK1_USER_PLAYED_USER = createForeignKey(Key.KEY_USER_PRIMARY, UserPlayed.USER_PLAYED, UserPlayed.USER_PLAYED.USERNAME);
		public static final ForeignKey<UserPlayedRecord, ResourceRecord> FK2_USER_PLAYED_RESOURCE = createForeignKey(Key.KEY_RESOURCE_PRIMARY, UserPlayed.USER_PLAYED, UserPlayed.USER_PLAYED.RESOURCE);
		public static final ForeignKey<UserRoleRecord, UserRecord> FK1_USER_ROLE_USER = createForeignKey(Key.KEY_USER_PRIMARY, UserRole.USER_ROLE, UserRole.USER_ROLE.USERNAME);
	}
}
